'use client';

import { MutableRefObject } from "react";

interface DialogOpenHandlerProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  handleOpenChange: (open: boolean) => void;
  isUpdatingRef: MutableRefObject<boolean>;
  isEditingNotes: boolean;
  notes: string;
  originalNotes: string;
  saveNotes: () => Promise<void>;
  setLoadingModalContent: (loading: boolean) => void;
  setRenderFullContent: (render: boolean) => void;
  contentLoadedRef: MutableRefObject<boolean>;
  setShowEditModal: (show: boolean) => void;
  setShowNewServiceModal: (show: boolean) => void;
  showNewServiceModal: boolean;
  showEditModal: boolean;
  showPaymentMethodModal: boolean;
  onUpdate: () => Promise<void>;
}

/**
 * Ä°yileÅŸtirilmiÅŸ dialog aÃ§ma-kapama iÅŸleyicisi
 * Ana modalÄ±n aÃ§Ä±lmasÄ± ve kapanmasÄ± sÄ±rasÄ±nda yapÄ±lmasÄ± gereken iÅŸlemleri yÃ¶netir
 */
export function useDialogOpenHandler({
  open,
  onOpenChange,
  handleOpenChange,
  isUpdatingRef,
  isEditingNotes,
  notes,
  originalNotes,
  saveNotes,
  setLoadingModalContent,
  setRenderFullContent,
  contentLoadedRef,
  setShowEditModal,
  setShowNewServiceModal,
  showNewServiceModal,
  showEditModal,
  showPaymentMethodModal,
  onUpdate
}: DialogOpenHandlerProps) {
  console.log('ğŸ”µ DialogOpenHandler - useDialogOpenHandler Ã§aÄŸrÄ±ldÄ±, open:', open);

  /**
   * Ana modalÄ±n aÃ§Ä±lma ve kapanma davranÄ±ÅŸÄ±nÄ± yÃ¶netir
   * Ä°yileÅŸtirilmiÅŸ ve sadeleÅŸtirilmiÅŸ versiyonu
   */
  const handleDialogOpenChange = (isOpen: boolean, e?: React.BaseSyntheticEvent) => {
    console.log('ğŸ”µ DialogOpenHandler - handleDialogOpenChange Ã§aÄŸrÄ±ldÄ±, isOpen:', isOpen, 'iÃ§ modallar:', { 
      showNewServiceModal, 
      showEditModal, 
      showPaymentMethodModal 
    });
    
    // MODAL AÃ‡ILMA DURUMU
    if (isOpen) {
      // Modal aÃ§Ä±lÄ±rken state'leri gÃ¼ncelle
      onOpenChange(true);
      handleOpenChange(true);
      
      // Modal aÃ§Ä±ldÄ±ktan sonra toplamÄ± gÃ¼ncelle (mikro gecikme ile zamanlama sorunlarÄ±nÄ± Ã¶nle)
      setTimeout(() => {
        const updateEvent = new CustomEvent('force_payment_refresh', { 
          detail: { timestamp: Date.now() }
        });
        document.dispatchEvent(updateEvent);
      }, 100);
      
      return;
    }
    
    // MODAL KAPANMA DURUMU - AÅŸaÄŸÄ±daki koÅŸullarÄ± sÄ±rayla kontrol et
    
    // 1. Ä°Ã§ modallardan biri aÃ§Ä±ksa kapanmayÄ± engelle
    if (showNewServiceModal || showEditModal || showPaymentMethodModal) {
      console.log('ğŸ”´ Ana modal kapanmasÄ± engellendi: Ä°Ã§ modal aÃ§Ä±k');
      e?.preventDefault();
      return;
    }
    
    // 2. GÃ¼ncelleme devam ediyorsa kapanmayÄ± engelle (timeout sonrasÄ± reset)
    if (isUpdatingRef.current) {
      console.log('ğŸ”´ GÃ¼ncelleme iÅŸlemi devam ediyor, modal kapatÄ±lmasÄ± engellendi');
      e?.preventDefault();
      
      // GÃ¼venlik Ã¶nlemi - 5 saniye sonra flag'i sÄ±fÄ±rla
      setTimeout(() => {
        isUpdatingRef.current = false;
      }, 5000);
      
      return;
    }
    
    // 3. Not dÃ¼zenleme modundaysa ve notlar deÄŸiÅŸtiyse, Ã¶nce notlarÄ± kaydet
    if (isEditingNotes && notes !== originalNotes) {
      console.log('ğŸ”´ Notlar deÄŸiÅŸmiÅŸ, Ã¶nce kaydediliyor...');
      
      // NotlarÄ± kaydet ve sonra kapat
      (async () => {
        try {
          await saveNotes();
          closeModalSafely();
        } catch (err) {
          console.error('Not kaydederken hata:', err);
          closeModalSafely(); // Hata olsa bile modalÄ± kapat
        }
      })();
      
      return;
    }
    
    // TÃ¼m koÅŸullar geÃ§ildiyse gÃ¼venli ÅŸekilde kapat
    closeModalSafely();
  };
  
  // ModalÄ± gÃ¼venli bir ÅŸekilde kapatmak iÃ§in yardÄ±mcÄ± fonksiyon
  const closeModalSafely = () => {
    // ESC tuÅŸu kontrolÃ¼
    const escKeyPressed = document.activeElement === document.body &&
                      (window.event && (window.event as KeyboardEvent).key === 'Escape');
    
    // YÃ¼kleme durumlarÄ±nÄ± sÄ±fÄ±rla
    setLoadingModalContent(true);
    setRenderFullContent(false);
    contentLoadedRef.current = false;
    
    // ESC tuÅŸuna basÄ±ldÄ±ysa tÃ¼m modularÄ± kapat
    if (escKeyPressed) {
      setShowEditModal(false);
      setShowNewServiceModal(false);
    }
    
    // Ã–nce state'leri gÃ¼ncelle
    onOpenChange(false);
    handleOpenChange(false);
    
    // Modal kapandÄ±ÄŸÄ±nÄ± kesinleÅŸtirmek iÃ§in son kontrol
    setTimeout(() => {
      if (open) { // Modal hala aÃ§Ä±ksa
        console.log('ğŸ”´ Modal kapanma iÅŸlemleri baÅŸarÄ±sÄ±z oldu, zorla yenileniyor');
        onUpdate(); // Takvimi zorla yenile
        onOpenChange(false); // Son bir defa daha kapatmayÄ± dene
      }
    }, 300);   
  };

  return { handleDialogOpenChange };
}
