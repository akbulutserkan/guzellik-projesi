{
  "code": "/**\n * Hizmet kategorileri için yardımcı fonksiyonlar\n */\nclass ServiceCategoryHelper {\n  /**\n   * Yeni bir kategori oluştur\n   * @param {string} name - Kategori adı\n   * @param {string} description - Kategori açıklaması\n   * @returns {Promise<Object>} - Oluşturulan kategori\n   */\n  static async createCategory(name, description = '') {\n    if (!name) throw new Error('Kategori adı gereklidir');\n    \n    return await prisma.serviceCategory.create({\n      data: {\n        name,\n        description,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    });\n  }\n  \n  /**\n   * Bir kategorinin tüm hizmetlerini getir\n   * @param {string} categoryId - Kategori ID\n   * @returns {Promise<Array>} - Hizmetler dizisi\n   */\n  static async getCategoryServices(categoryId) {\n    return await prisma.service.findMany({\n      where: {\n        categoryId,\n        isDeleted: false\n      },\n      orderBy: {\n        name: 'asc'\n      }\n    });\n  }\n  \n  /**\n   * Kategori üzerinde istatistikler oluştur\n   * @param {string} categoryId - Kategori ID\n   * @returns {Promise<Object>} - Kategori istatistikleri\n   */\n  static async getCategoryStats(categoryId) {\n    const services = await this.getCategoryServices(categoryId);\n    \n    return {\n      totalServices: services.length,\n      averagePrice: services.reduce((sum, service) => sum + service.price, 0) / (services.length || 1),\n      averageDuration: services.reduce((sum, service) => sum + service.duration, 0) / (services.length || 1),\n      minPrice: services.length ? Math.min(...services.map(s => s.price)) : 0,\n      maxPrice: services.length ? Math.max(...services.map(s => s.price)) : 0\n    };\n  }\n}\n\n// Test çıktısı\nconsole.log(\"ServiceCategoryHelper sınıfı başarıyla oluşturuldu\");",
  "language": "javascript",
  "context": "Hizmet kategorileri için yardımcı sınıf",
  "tags": ["kategori", "hizmet", "helper", "prisma"]
}