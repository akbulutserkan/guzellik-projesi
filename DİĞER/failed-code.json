{
  "code": "/**\n * Fiyat güncellemesi için yardımcı fonksiyon\n * @param {string} categoryId - Kategori ID\n * @param {number} percentage - Yüzde değeri (örn: 10 = %10 artış, -5 = %5 azalış)\n * @returns {Promise<Object>} - Güncelleme sonuçları\n */\nasync function updatePricesByCategory(categoryId, percentage) {\n  if (!categoryId) throw new Error('Kategori ID gereklidir');\n  \n  // Kategoriyi kontrol et\n  const category = await prisma.serviceCategory.findUnique({\n    where: { id: categoryId }\n  });\n  \n  if (!category) throw new Error('Kategori bulunamadı');\n  \n  // Kategorideki tüm hizmetleri al\n  const services = await prisma.service.findMany({\n    where: {\n      categoryId,\n      isDeleted: false\n    }\n  });\n  \n  // Bu noktada bir yazım hatası var (eksik parantez)\n  const updateResults = await Promise.all(\n    services.map(async (service => {\n      const oldPrice = service.price;\n      const newPrice = oldPrice * (1 + percentage / 100);\n      \n      // Hizmeti güncelle\n      const updatedService = await prisma.service.update({\n        where: { id: service.id },\n        data: {\n          price: newPrice,\n          updatedAt: new Date()\n        }\n      });\n      \n      // Fiyat geçmişini kaydet\n      await prisma.servicePriceHistory.create({\n        data: {\n          serviceId: service.id,\n          oldPrice,\n          newPrice,\n          changeDate: new Date(),\n          changeType: percentage >= 0 ? 'INCREASE' : 'DECREASE'\n        }\n      });\n      \n      return {\n        serviceId: service.id,\n        serviceName: service.name,\n        oldPrice,\n        newPrice\n      };\n    })\n  );\n  \n  return {\n    categoryId,\n    categoryName: category.name,\n    servicesUpdated: updateResults.length,\n    updateResults\n  };\n}\n\n// Test çıktısı\nconsole.log(\"Fiyat güncelleme fonksiyonu oluşturuldu\");",
  "language": "javascript",
  "context": "Kategori bazlı fiyat güncelleme fonksiyonu",
  "tags": ["fiyat", "güncelleme", "kategori", "prisma", "hata"]
}