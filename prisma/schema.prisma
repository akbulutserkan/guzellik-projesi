generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Rol ve Yetki Enumları
enum UserRole {
  ADMIN
  STAFF
  MANAGER
  CASHIER
}

enum Permission {
  // Hizmetler yetkileri
  ADD_SERVICE_CATEGORY
  EDIT_SERVICE_CATEGORY
  DELETE_SERVICE_CATEGORY
  ADD_SERVICE
  EDIT_SERVICE
  DELETE_SERVICE
  BULK_UPDATE_PRICES
  VIEW_PRICE_HISTORY
  VIEW_SERVICES

  // Personel Yetkileri
  VIEW_STAFF
  EDIT_STAFF
  DELETE_STAFF

  // Müşteri Yetkileri
  VIEW_CUSTOMERS
  ADD_CUSTOMERS
  EDIT_CUSTOMERS
  DELETE_CUSTOMERS

  // Randevu Yetkileri
  VIEW_APPOINTMENTS
  EDIT_APPOINTMENTS
  DELETE_APPOINTMENTS

  // Paket Yetkileri
  VIEW_PACKAGES
  ADD_PACKAGES
  EDIT_PACKAGES
  DELETE_PACKAGES

  // Paket Satışları Yetkileri
  VIEW_PACKAGE_SALES
  ADD_PACKAGE_SALES
  EDIT_PACKAGE_SALES
  DELETE_PACKAGE_SALES

  // Ürün Yetkileri
  VIEW_PRODUCTS
  ADD_PRODUCTS
  EDIT_PRODUCTS
  DELETE_PRODUCTS

  // Ödeme Yetkileri
  VIEW_PAYMENTS
  EDIT_PAYMENTS
  DELETE_PAYMENTS

  // Ürün Satışları Yetkileri
  VIEW_PRODUCT_SALES
  ADD_PRODUCT_SALES
  EDIT_PRODUCT_SALES
  DELETE_PRODUCT_SALES
}


// Staff modeli - Yetki sistemi entegrasyonu
model Staff {
  id               String           @id @default(cuid())
  username         String           @unique
  password         String
  name             String
  phone            String
  email            String?
  accountType      UserRole         @default(STAFF)
  serviceGender    String
  permissions      Permission[] // Güncellenmiş permissions alanı
  showInCalendar   Boolean          @default(true)
  workingHours     Json[]
  isActive         Boolean          @default(true)
  position         String?
  failedAttempts   Int              @default(0)
  lastFailedLogin  DateTime?
  lastLogin        DateTime?
  isLocked         Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  appointments     Appointment[]
  packageSessions  PackageSession[]
  services         Service[]        @relation("ServiceToStaff")
  packageSales     PackageSale[]
  productSales     ProductSale[]

  @@index([username])
  @@index([accountType])
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
  packages    Package[]
}

model Service {
  id                String               @id @default(cuid())
  name              String
  duration          Int
  price             Float
  categoryId        String?
  isActive          Boolean              @default(true)
  isDeleted         Boolean              @default(false)
  deletedAt         DateTime?            // Yeni eklenen alan
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  category          ServiceCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  staff             Staff[]              @relation("ServiceToStaff")
  appointments      Appointment[]
  packageSessions   PackageSession[]
  packageServices   PackageService[]
  priceHistory      ServicePriceHistory[]

  @@index([categoryId])
}

model Package {
  id              String           @id @default(cuid())
  name            String
  sessionCount    Int
  price           Float
  categoryId      String?
  isDeleted       Boolean          @default(false)
  deletedAt       DateTime?        // Soft delete için ek alan
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  category        ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  sales           PackageSale[]
  packageServices PackageService[]

  @@index([categoryId])
}

model PackageSale {
  id            String         @id @default(cuid())
  packageId     String
  customerId    String
  staffId       String
  staff         Staff          @relation(fields: [staffId], references: [id])
  price         Float
  status        String         @default("ACTIVE")
  notes         String?
  saleDate      DateTime       @default(now()) @db.Timestamptz
  expiryDate    DateTime?      @db.Timestamptz
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  usedSessions  Int            @default(0)
  deletedAt     DateTime?      // Soft delete için alan
  customer      Customer       @relation(fields: [customerId], references: [id])
  package       Package        @relation(fields: [packageId], references: [id])
  sessions      PackageSession[]
  payments      Payment[]
}

model PackageSession {
  id                   String        @id @default(cuid())
  packageSaleId        String
  staffId              String
  serviceId            String?
  deleted_service_name String?
  date                 DateTime?
  status               String        @default("PENDING")
  notes                String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  deletedAt            DateTime?     // Soft delete için alan
  packageSale          PackageSale   @relation(fields: [packageSaleId], references: [id])
  service              Service?      @relation(fields: [serviceId], references: [id])
  staff                Staff         @relation(fields: [staffId], references: [id])
  appointments         Appointment[] // Karşılıklı ilişki ekleyelim
}

model PackageService {
  packageId            String
  serviceId            String
  deleted_service_name String?
  package              Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service              Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([packageId, serviceId])
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  phone        String
  email        String?
  notes        String?
  deleted      Boolean       @default(false)  // Diğer modellerle uyumlu olacak şekilde eklendi
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  packageSales PackageSale[]
  payments     Payment[]
  productSales ProductSale[]
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Appointment {
  id                   String            @id @default(cuid())
  customerId           String
  staffId              String
  serviceId            String
  deleted_service_name String?
  startTime            DateTime
  endTime              DateTime
  status               AppointmentStatus @default(PENDING)
  attendance           String            @default("NOT_SPECIFIED")
  amount               Float?
  paymentMethod        String?
  paymentStatus        String?           @default("PENDING")
  notes                String?
  packageSessionId     String?           // Paket seansı ile ilişki için yeni alan
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  customer             Customer          @relation(fields: [customerId], references: [id])
  service              Service           @relation(fields: [serviceId], references: [id])
  staff                Staff             @relation(fields: [staffId], references: [id])
  packageSession       PackageSession?   @relation(fields: [packageSessionId], references: [id])

  @@index([packageSessionId])
}

model Payment {
  id            String       @id @default(cuid())
  customerId    String
  amount        Float
  paymentType   String
  paymentMethod String
  packageSaleId String?
  productSaleId String?
  installment   Int?
  receiptNumber String?
  notes         String?
  status        String       @default("COMPLETED")
  processedBy   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?    // Soft delete için alan
  customer      Customer     @relation(fields: [customerId], references: [id])
  packageSale   PackageSale? @relation(fields: [packageSaleId], references: [id])
  productSale   ProductSale? @relation(fields: [productSaleId], references: [id])
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  isDeleted   Boolean       @default(false)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sales       ProductSale[]
}

model ProductSale {
  id            String    @id @default(cuid())
  date          DateTime  @default(now()) @db.Timestamptz
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  staffId       String
  staff         Staff     @relation(fields: [staffId], references: [id])
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  paymentStatus String    @default("PENDING")
  paymentType   String?
  notes         String?
  isFullyPaid   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payments      Payment[]
}

model Settings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessDay {
  id            Int      @id @default(autoincrement())
  dayOfWeek     Int      @unique
  isWorkingDay  Boolean  @default(true)
  startTime     String?
  endTime       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("business_days")
}

model HolidayException {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique
  isWorkingDay  Boolean  @default(false)
  startTime     String?
  endTime       String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("holiday_exceptions")
}

// MCP projesi verileri için model
model ProjectData {
  id        String    @id @default(cuid())
  key       String    @unique
  data      Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("project_data")
}

model PriceUpdateHistory {
  id            String    @id @default(cuid())
  type          String
  amount        Float
  isPercentage  Boolean
  categoryId    String?
  affectedCount Int
  createdAt     DateTime  @default(now())
  categoryName  String?
  oldPrices     Json
  updatedBy     String?
  isReverted    Boolean   @default(false)
  revertedAt    DateTime?
}

model ServicePriceHistory {
  id              String    @id @default(cuid())
  serviceId       String
  oldPrice        Float
  newPrice        Float
  changeDate      DateTime  @default(now())
  changeType      String
  isReverted      Boolean   @default(false)
  revertedAt      DateTime?
  relatedHistoryId String?
  bulkUpdateId     String?
  service         Service   @relation(fields: [serviceId], references: [id])
}

